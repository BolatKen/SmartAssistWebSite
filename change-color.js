const fs = require('fs');
const path = require('path');
const readline = require('readline');

// üé® –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞ –Ω–∞ –≤—ã–±–æ—Ä
const toColorList = ['#00ff9d', '#a855f7', '#facc15', '#ffffff', '#3b82f6'];

// üì¶ –¶–µ–ª–µ–≤—ã–µ —Ñ–∞–π–ª—ã
const files = [
  './components/navbar.tsx',
  './components/footer.tsx'
];

// üîç –ò—â–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã –≤–∏–¥–∞ [#hex] –≤–∫–ª—é—á–∞—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä /80)
const colorPattern = /(?<full>(?<!bg)(?<prefix>\w*[-:]?)\[#(?:[0-9a-fA-F]{3,8})\](\/\d{1,3})?)/g;

// üß† –í—ã–±–æ—Ä —Ü–≤–µ—Ç–∞
function askColorChoice() {
  console.log('üé® –í—ã–±–µ—Ä–∏ —Ü–≤–µ—Ç –¥–ª—è –∑–∞–º–µ–Ω—ã:\n');
  toColorList.forEach((color, index) => {
    console.log(`  ${index + 1}. ${color}`);
  });

  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  rl.question('\n–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ü–≤–µ—Ç–∞: ', (answer) => {
    const index = parseInt(answer) - 1;
    if (!toColorList[index]) {
      console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.');
      rl.close();
      return;
    }

    const selectedColor = toColorList[index];
    console.log(`\nüöÄ –ó–∞–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–∞ –Ω–∞: ${selectedColor} (–∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ –≤ <footer>)\n`);
    replaceColorsInFiles(selectedColor);
    rl.close();
  });
}

// üßº –ó–∞–º–µ–Ω–∞ —Ü–≤–µ—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞—è 1-–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ <footer>
function replaceColorsInFiles(toColor) {
  files.forEach(file => {
    if (!fs.existsSync(file)) {
      console.warn(`‚ö† –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${file}`);
      return;
    }

    let content = fs.readFileSync(file, 'utf8');
    const lines = content.split('\n');
    let inFooter = false;
    let footerColorSkipped = false;

    const modifiedLines = lines.map((line) => {
        // –í–æ—à–ª–∏ –≤ <footer>
        if (line.includes('<footer')) {
          inFooter = true;
          footerColorSkipped = false;
        }
      
        let modifiedLine = line;
      
        // –ï—Å–ª–∏ –≤ —Ç–µ–≥–µ <footer> –∏ –µ—Å—Ç—å —Ü–≤–µ—Ç
        if (inFooter) {
          const matches = [...line.matchAll(/\[#(?:[0-9a-fA-F]{3,8})\](\/\d{1,3})?/g)];
          if (matches.length > 0) {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¢–û–õ–¨–ö–û –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–º–µ–Ω—è–µ–º
            let replacedCount = 0;
            modifiedLine = modifiedLine.replace(/\[#(?:[0-9a-fA-F]{3,8})\](\/\d{1,3})?/g, (match) => {
              if (!footerColorSkipped) {
                footerColorSkipped = true;
                return match; // –æ—Å—Ç–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π
              } else {
                return `[${toColor}]`; // –∑–∞–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ
              }
            });
          }
          return modifiedLine;
        }
      
        // –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ ‚Äî –æ–±—ã—á–Ω–∞—è –∑–∞–º–µ–Ω–∞
        return modifiedLine.replace(colorPattern, (_, full, prefix, suffix) => {
          return `${prefix}[${toColor}]${suffix || ''}`;
        });
      });
      

    fs.writeFileSync(file, modifiedLines.join('\n'), 'utf8');
    console.log(`‚úî –¶–≤–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ ${file}`);
  });
}

// ‚ñ∂ –ó–∞–ø—É—Å–∫
askColorChoice();
